# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

# GitLab uses docker in the background, so we need to specify the 
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
# Uses NodeJS V 9.4.0
image: docker:stable

# cache: 
#   untracked: true
#   key: "$CI_PROJECT_ID"
#   paths:
#     - node_modules
  
variables:
  REGISTRY_GROUP: sigma-livestream
  HARBOR_IMAGE_TAG: $REGISTRY/$REGISTRY_GROUP/$CI_PROJECT_NAME
  DOCKER_IMAGE_TAG: $DOCKER_USERNAME/$CI_PROJECT_NAME
  DEPLOY_IMAGE: $REGISTRY/$REGISTRY_GROUP/$CI_PROJECT_NAME
  DEPLOY_SERVICE: manifest-service


# :$CI_COMMIT_REF_SLUG
# We tell GitLab to install all the packages
# before running anything.
# Docker images come with yarn preinstalled

# You specify the stages. Those are the steps that GitLab will go through 
# Order matters. 
stages:
  - build
  - docker-release
  - deploy
  # - staging
  # - openMr
  # - production

image build:
  stage: build
  tags:
    - dind
  script: 
    - chmod +x ./scripts/create-image.sh
    - ./scripts/create-image.sh $HARBOR_IMAGE_TAG $BASE_IMAGE $DOCKER_IMAGE_TAG $CI_COMMIT_SHORT_SHA

release image private registry:
  stage: docker-release
  tags:
    - dind
  before_script:  
    - docker login -u $HARBOR_USERNAME -p $HARBOR_PASSWORD $REGISTRY
  script:
    - chmod +x ./scripts/push-image.sh
    - ./scripts/push-image.sh $HARBOR_IMAGE_TAG $CI_COMMIT_SHORT_SHA
  only:
    - develop

release image docker hub:
  stage: docker-release
  tags:
    - dind
  before_script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  script:
    - chmod +x ./scripts/push-image.sh
    - ./scripts/push-image.sh $DOCKER_IMAGE_TAG
  only:
    - master


deploy to dev:
  stage: deploy
  only:
    - develop
  variables:
    DEPLOY_ENVIRONMENT: develop
    DEPLOY_IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  trigger:
    project: sigma-livestream/k8s-infra-dev
    branch: master
